package nl.spotdog.bark.server.builders

import akka.util.ByteString

import nl.spotdog.bark.data_protocol._
import nl.spotdog.bark.data_protocol.Bark._
import scala.concurrent.Future
import scala.concurrent.ExecutionContext.Implicits.global
import nl.spotdog.bark.server._

import scalaz._
import Scalaz._

import scala.util.Try

trait BarkCastBuilder {
  def name: Symbol

  def apply[R](f: Function##0[R]) =
    BarkServerFunction.cast(name)((bs: ByteString) ⇒ Try(f()))

  [#def apply[[#T1#], R](f: Function1[[#T1#], R])(implicit reader: ETFReader[Tuple1[[#T1#]]]) = 
		BarkServerFunction.cast(name)((bs: ByteString) ⇒ Try(fromBark[Tuple1[[#T1#]]](bs).getOrElse(throw new Exception("Couldn't process arguments"))) flatMap {x ⇒ 
				Try(f([#x._1#]))
		}) 
	#
	]
}